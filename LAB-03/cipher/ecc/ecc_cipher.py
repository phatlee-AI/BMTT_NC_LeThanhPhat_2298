import ecdsa, os

if not os.path.exists('cipher/ecc/keys'):
    os.makedirs('cipher/ecc/keys')

class ECCCipher:
    def __init__(self):
        pass

    def generate_keys(self):
        sk = ecdsa.SigningKey.generate()  # T·∫°o kh√≥a ri√™ng t∆∞
        vk = sk.get_verifying_key()      # L·∫•y kh√≥a c√¥ng khai t·ª´ kh√≥a ri√™ng t∆∞
        
        with open('cipher/ecc/keys/privateKey.pem', 'wb') as p:
            p.write(sk.to_pem())
        
        with open('cipher/ecc/keys/publicKey.pem', 'wb') as p:
            p.write(vk.to_pem())

    def load_keys(self):
        with open('cipher/ecc/keys/privateKey.pem', 'rb') as p:
            sk = ecdsa.SigningKey.from_pem(p.read())
        
        with open('cipher/ecc/keys/publicKey.pem', 'rb') as p:
            vk = ecdsa.VerifyingKey.from_pem(p.read())
        
        return sk, vk

    def sign(self, message, key):
        # K√Ω d·ªØ li·ªáu b·∫±ng kh√≥a ri√™ng t∆∞
        return key.sign(message.encode('ascii'))

    def verify(self, message, signature, key):
        try:
            return key.verify(signature, message.encode('ascii'))
        except ecdsa.BadSignatureError:
            return False

# N·∫øu b·∫°n mu·ªën ki·ªÉm th·ª≠ nhanh:
if __name__ == "__main__":
    ecc = ECCCipher()
    ecc.generate_keys()
    sk, vk = ecc.load_keys()

    msg = "Hello, ECC!"
    signature = ecc.sign(msg, sk)
    
    is_verified = ecc.verify(msg, signature, vk)
    print("Ch·ªØ k√Ω h·ª£p l·ªá:" if is_verified else "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá")

    # Th·ª≠ v·ªõi th√¥ng ƒëi·ªáp kh√°c
    is_verified_fake = ecc.verify("Fake Message", signature, vk)
    print("Ch·ªØ k√Ω h·ª£p l·ªá v·ªõi th√¥ng ƒëi·ªáp gi·∫£ m·∫°o:" if is_verified_fake else "Ch·ªØ k√Ω kh√¥ng h·ª£p l·ªá v·ªõi th√¥ng ƒëi·ªáp gi·∫£ m·∫°o")

# N·∫øu c√≥ g√¨ c·∫ßn c·∫£i ti·∫øn, c·ª© tho·∫£i m√°i n√≥i nh√©! üöÄ
